@page "/recipes/{recipename}"
@using System.Text.Json
@using BlazorProj.ViewModels
@inject IHttpClientFactory ClientFactory

@if (_recipe is not null)
{
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@_recipe.PropertiesViewModel.Title</MudText>
    <MudGrid Spacing="6" Class="mt-16">
        <MudItem xs="7">
            <MudText Typo="Typo.h5" GutterBottom="true" Class="mt-16">Recipe steps</MudText>
            <MudGrid Class="mt-16">
                <MudText>@((MarkupString)_recipe.PropertiesViewModel.RecipeSteps.Markup)</MudText>
                <MudImage Src="@CalculateImageUrl(_recipe)" Class="rounded-lg mt-16" ObjectPosition="ObjectPosition.Center" Height="300" Width="300"/>
            </MudGrid>
        </MudItem>
        
        <MudItem xs="5">
            <MudText Typo="Typo.h5" GutterBottom="true">Ingredients:</MudText>
            <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined="true">
                <MudList Clickable="true">
                    @foreach (var ingredient in _recipe.PropertiesViewModel.Ingredients)
                    {
                        <MudListItem Icon="@Icons.Material.Filled.Ballot">
                            <div class="d-flex">
                                <MudText>@ingredient</MudText>
                            </div>
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudGrid>
}


@* @if (_recipe?.Name is null) *@
@* { *@
@*     <h1>loading..</h1> *@
@* } *@
@* else *@
@* { *@
@*     <h1>@_recipe.Name</h1> *@
@*     <img src="@CalculateImageUrl(_recipe)" alt="@_recipe.PropertiesViewModel.Images.First().Name" width="300" height="300" /> *@
@*     <MudText Typo="Typo.h2">Ingredients: </MudText> *@
@*     <ul> *@
@*         @foreach (var ingredient in _recipe.PropertiesViewModel.Ingredients) *@
@*         { *@
@*             <li><MudText Typo="Typo.h4">@ingredient</MudText></li> *@
@*         } *@
@*     </ul> *@
@* *@
@*     <MudText>@((MarkupString)_recipe.PropertiesViewModel.RecipeSteps.Markup)</MudText> *@
@* } *@

@code {

    private RecipeViewModel? _recipe;
    
    [Parameter]
    public string? RecipeName{ get;set; }
    
    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            $"https://localhost:44351/umbraco/delivery/api/v1/content/item/recipes/{RecipeName}?expand=all");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        _recipe = await JsonSerializer.DeserializeAsync<RecipeViewModel>(responseStream);
    }
    
    private string CalculateImageUrl(RecipeViewModel recipe)
    {
        return Constants.BaseUrl + recipe.PropertiesViewModel.Images.First().Url;
    }
}