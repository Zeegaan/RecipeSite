@page "/"
@using System.Text.Json
@using BlazorProj.ViewModels


@inject IHttpClientFactory ClientFactory
<PageTitle>Index</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@_homePageViewModel?.Properties.Header</MudText>
<MudText Align="Align.Center">Here you can take a look at some of our most popular recipes!</MudText>

@if(_homePageViewModel?.Properties?.Recipes == null)
{
    <p>Loading...</p>
}
else
{
    <MudGrid Class="mt-16">
    @foreach (var recipe in _homePageViewModel.Properties.Recipes)
    {
        <MudItem xs="4">
            <MudCard>
                <MudCardMedia Image="@CalculateImageUrl(recipe)" Height="300" Width="200"/>
                <MudCardContent>
                    <MudText Typo="Typo.h5">@recipe.PropertiesViewModel.Title</MudText>
                    <MudText Typo="Typo.body2">Lorem ipsum dlorLorem ipsum dlorLorem ipsum dlorLorem ipsum dlor</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Go to recipe</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        @* <a href="@CalculateRecipeUrl(recipe)"><h2>@recipe.PropertiesViewModel.Title</h2></a> *@
        @* <img src="@CalculateImageUrl(recipe)" alt="@recipe.PropertiesViewModel.Images.First().Name" /> *@
    }
    </MudGrid>
    }


@code {

    private HomePageViewModel _homePageViewModel;

    private string CalculateImageUrl(RecipeViewModel recipe)
    {
        return Constants.BaseUrl + recipe.PropertiesViewModel.Images.First().Url;
    }

    private string CalculateRecipeUrl(RecipeViewModel recipeViewModel)
    {
        return recipeViewModel.RouteViewModel.Path;
    }
    
    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://localhost:44351/umbraco/delivery/api/v1/content/item/home-page?expand=all");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        _homePageViewModel = await JsonSerializer.DeserializeAsync<HomePageViewModel>(responseStream);
    }

}